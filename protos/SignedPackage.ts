// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "SignedPackage.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message SignedPackage
 */
export interface SignedPackage {
    /**
     * @generated from protobuf field: TransportData transportData = 1;
     */
    transportData?: TransportData;
    /**
     * @generated from protobuf field: string signature = 3;
     */
    signature: string;
}
/**
 * @generated from protobuf message TransportData
 */
export interface TransportData {
    /**
     * @generated from protobuf field: OpTransport opTransport = 1;
     */
    opTransport: OpTransport;
    /**
     * @generated from protobuf field: bytes opData = 2;
     */
    opData: Uint8Array;
    /**
     * @generated from protobuf field: string timeHash = 3;
     */
    timeHash: string;
}
/**
 * @generated from protobuf message DiscoveryData
 */
export interface DiscoveryData {
    /**
     * @generated from protobuf field: bytes publicKey = 1;
     */
    publicKey: Uint8Array;
    /**
     * @generated from protobuf field: repeated RemoteIdentities remoteIdentities = 2;
     */
    remoteIdentities: RemoteIdentities[];
}
/**
 * @generated from protobuf message RemoteIdentities
 */
export interface RemoteIdentities {
    /**
     * @generated from protobuf field: bytes address = 1;
     */
    address: Uint8Array;
    /**
     * @generated from protobuf field: bytes port = 2;
     */
    port: Uint8Array;
    /**
     * @generated from protobuf field: bytes pubKey = 3;
     */
    pubKey: Uint8Array;
}
/**
 * @generated from protobuf message EncryptedData
 */
export interface EncryptedData {
    /**
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
}
/**
 * @generated from protobuf enum OpTransport
 */
export enum OpTransport {
    /**
     * @generated from protobuf enum value: DISCOVERY = 0;
     */
    DISCOVERY = 0,
    /**
     * @generated from protobuf enum value: ENCRYPTED = 1;
     */
    ENCRYPTED = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class SignedPackage$Type extends MessageType<SignedPackage> {
    constructor() {
        super("SignedPackage", [
            { no: 1, name: "transportData", kind: "message", T: () => TransportData },
            { no: 3, name: "signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignedPackage>): SignedPackage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.signature = "";
        if (value !== undefined)
            reflectionMergePartial<SignedPackage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignedPackage): SignedPackage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TransportData transportData */ 1:
                    message.transportData = TransportData.internalBinaryRead(reader, reader.uint32(), options, message.transportData);
                    break;
                case /* string signature */ 3:
                    message.signature = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignedPackage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TransportData transportData = 1; */
        if (message.transportData)
            TransportData.internalBinaryWrite(message.transportData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string signature = 3; */
        if (message.signature !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SignedPackage
 */
export const SignedPackage = new SignedPackage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransportData$Type extends MessageType<TransportData> {
    constructor() {
        super("TransportData", [
            { no: 1, name: "opTransport", kind: "enum", T: () => ["OpTransport", OpTransport] },
            { no: 2, name: "opData", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "timeHash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TransportData>): TransportData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.opTransport = 0;
        message.opData = new Uint8Array(0);
        message.timeHash = "";
        if (value !== undefined)
            reflectionMergePartial<TransportData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransportData): TransportData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* OpTransport opTransport */ 1:
                    message.opTransport = reader.int32();
                    break;
                case /* bytes opData */ 2:
                    message.opData = reader.bytes();
                    break;
                case /* string timeHash */ 3:
                    message.timeHash = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransportData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* OpTransport opTransport = 1; */
        if (message.opTransport !== 0)
            writer.tag(1, WireType.Varint).int32(message.opTransport);
        /* bytes opData = 2; */
        if (message.opData.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.opData);
        /* string timeHash = 3; */
        if (message.timeHash !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.timeHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TransportData
 */
export const TransportData = new TransportData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DiscoveryData$Type extends MessageType<DiscoveryData> {
    constructor() {
        super("DiscoveryData", [
            { no: 1, name: "publicKey", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "remoteIdentities", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RemoteIdentities }
        ]);
    }
    create(value?: PartialMessage<DiscoveryData>): DiscoveryData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.publicKey = new Uint8Array(0);
        message.remoteIdentities = [];
        if (value !== undefined)
            reflectionMergePartial<DiscoveryData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiscoveryData): DiscoveryData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes publicKey */ 1:
                    message.publicKey = reader.bytes();
                    break;
                case /* repeated RemoteIdentities remoteIdentities */ 2:
                    message.remoteIdentities.push(RemoteIdentities.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DiscoveryData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes publicKey = 1; */
        if (message.publicKey.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.publicKey);
        /* repeated RemoteIdentities remoteIdentities = 2; */
        for (let i = 0; i < message.remoteIdentities.length; i++)
            RemoteIdentities.internalBinaryWrite(message.remoteIdentities[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DiscoveryData
 */
export const DiscoveryData = new DiscoveryData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoteIdentities$Type extends MessageType<RemoteIdentities> {
    constructor() {
        super("RemoteIdentities", [
            { no: 1, name: "address", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "port", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "pubKey", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RemoteIdentities>): RemoteIdentities {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.address = new Uint8Array(0);
        message.port = new Uint8Array(0);
        message.pubKey = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<RemoteIdentities>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoteIdentities): RemoteIdentities {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes address */ 1:
                    message.address = reader.bytes();
                    break;
                case /* bytes port */ 2:
                    message.port = reader.bytes();
                    break;
                case /* bytes pubKey */ 3:
                    message.pubKey = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoteIdentities, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes address = 1; */
        if (message.address.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.address);
        /* bytes port = 2; */
        if (message.port.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.port);
        /* bytes pubKey = 3; */
        if (message.pubKey.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.pubKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RemoteIdentities
 */
export const RemoteIdentities = new RemoteIdentities$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EncryptedData$Type extends MessageType<EncryptedData> {
    constructor() {
        super("EncryptedData", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<EncryptedData>): EncryptedData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<EncryptedData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EncryptedData): EncryptedData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EncryptedData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EncryptedData
 */
export const EncryptedData = new EncryptedData$Type();
