// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "SignedPackage.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message SignedPackage
 */
export interface SignedPackage {
    /**
     * @generated from protobuf field: TransportData transportData = 1;
     */
    transportData?: TransportData;
    /**
     * @generated from protobuf field: string publicKey = 2;
     */
    publicKey: string;
    /**
     * @generated from protobuf field: string signature = 3;
     */
    signature: string;
}
/**
 * @generated from protobuf message TransportData
 */
export interface TransportData {
    /**
     * @generated from protobuf field: OpTransport opTransport = 1;
     */
    opTransport: OpTransport;
    /**
     * @generated from protobuf field: bytes message = 2;
     */
    message: Uint8Array;
    /**
     * @generated from protobuf field: string timeHash = 3;
     */
    timeHash: string;
}
/**
 * @generated from protobuf enum OpTransport
 */
export enum OpTransport {
    /**
     * @generated from protobuf enum value: DISCOVERY = 0;
     */
    DISCOVERY = 0,
    /**
     * @generated from protobuf enum value: ENCRYPTED = 1;
     */
    ENCRYPTED = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class SignedPackage$Type extends MessageType<SignedPackage> {
    constructor() {
        super("SignedPackage", [
            { no: 1, name: "transportData", kind: "message", T: () => TransportData },
            { no: 2, name: "publicKey", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignedPackage>): SignedPackage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.publicKey = "";
        message.signature = "";
        if (value !== undefined)
            reflectionMergePartial<SignedPackage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignedPackage): SignedPackage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TransportData transportData */ 1:
                    message.transportData = TransportData.internalBinaryRead(reader, reader.uint32(), options, message.transportData);
                    break;
                case /* string publicKey */ 2:
                    message.publicKey = reader.string();
                    break;
                case /* string signature */ 3:
                    message.signature = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignedPackage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TransportData transportData = 1; */
        if (message.transportData)
            TransportData.internalBinaryWrite(message.transportData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string publicKey = 2; */
        if (message.publicKey !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.publicKey);
        /* string signature = 3; */
        if (message.signature !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SignedPackage
 */
export const SignedPackage = new SignedPackage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransportData$Type extends MessageType<TransportData> {
    constructor() {
        super("TransportData", [
            { no: 1, name: "opTransport", kind: "enum", T: () => ["OpTransport", OpTransport] },
            { no: 2, name: "message", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "timeHash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TransportData>): TransportData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.opTransport = 0;
        message.message = new Uint8Array(0);
        message.timeHash = "";
        if (value !== undefined)
            reflectionMergePartial<TransportData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransportData): TransportData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* OpTransport opTransport */ 1:
                    message.opTransport = reader.int32();
                    break;
                case /* bytes message */ 2:
                    message.message = reader.bytes();
                    break;
                case /* string timeHash */ 3:
                    message.timeHash = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransportData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* OpTransport opTransport = 1; */
        if (message.opTransport !== 0)
            writer.tag(1, WireType.Varint).int32(message.opTransport);
        /* bytes message = 2; */
        if (message.message.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.message);
        /* string timeHash = 3; */
        if (message.timeHash !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.timeHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TransportData
 */
export const TransportData = new TransportData$Type();
