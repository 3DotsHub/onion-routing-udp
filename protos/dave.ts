// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dave.proto" (syntax proto3)
// tslint:disable
//
// Copyright 2024 Joey Innes <joey@inneslabs.uk>
//
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message M
 */
export interface M {
    /**
     * @generated from protobuf field: Op op = 1;
     */
    op: Op;
    /**
     * @generated from protobuf field: repeated Pd pds = 2;
     */
    pds: Pd[];
    /**
     * @generated from protobuf field: bytes val = 3;
     */
    val: Uint8Array;
    /**
     * @generated from protobuf field: bytes time = 4;
     */
    time: Uint8Array;
    /**
     * @generated from protobuf field: bytes nonce = 5;
     */
    nonce: Uint8Array;
    /**
     * @generated from protobuf field: bytes work = 6;
     */
    work: Uint8Array;
}
/**
 * @generated from protobuf message Pd
 */
export interface Pd {
    /**
     * @generated from protobuf field: bytes ip = 1;
     */
    ip: Uint8Array;
    /**
     * @generated from protobuf field: uint32 port = 2;
     */
    port: number;
}
/**
 * @generated from protobuf enum Op
 */
export enum Op {
    /**
     * @generated from protobuf enum value: GETPEER = 0;
     */
    GETPEER = 0,
    /**
     * @generated from protobuf enum value: PEER = 1;
     */
    PEER = 1,
    /**
     * @generated from protobuf enum value: SET = 2;
     */
    SET = 2,
    /**
     * @generated from protobuf enum value: GET = 3;
     */
    GET = 3,
    /**
     * @generated from protobuf enum value: DAT = 4;
     */
    DAT = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class M$Type extends MessageType<M> {
    constructor() {
        super("M", [
            { no: 1, name: "op", kind: "enum", T: () => ["Op", Op] },
            { no: 2, name: "pds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Pd },
            { no: 3, name: "val", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "time", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "nonce", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "work", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<M>): M {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.op = 0;
        message.pds = [];
        message.val = new Uint8Array(0);
        message.time = new Uint8Array(0);
        message.nonce = new Uint8Array(0);
        message.work = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<M>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: M): M {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Op op */ 1:
                    message.op = reader.int32();
                    break;
                case /* repeated Pd pds */ 2:
                    message.pds.push(Pd.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bytes val */ 3:
                    message.val = reader.bytes();
                    break;
                case /* bytes time */ 4:
                    message.time = reader.bytes();
                    break;
                case /* bytes nonce */ 5:
                    message.nonce = reader.bytes();
                    break;
                case /* bytes work */ 6:
                    message.work = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: M, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Op op = 1; */
        if (message.op !== 0)
            writer.tag(1, WireType.Varint).int32(message.op);
        /* repeated Pd pds = 2; */
        for (let i = 0; i < message.pds.length; i++)
            Pd.internalBinaryWrite(message.pds[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bytes val = 3; */
        if (message.val.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.val);
        /* bytes time = 4; */
        if (message.time.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.time);
        /* bytes nonce = 5; */
        if (message.nonce.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.nonce);
        /* bytes work = 6; */
        if (message.work.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.work);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message M
 */
export const M = new M$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Pd$Type extends MessageType<Pd> {
    constructor() {
        super("Pd", [
            { no: 1, name: "ip", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "port", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Pd>): Pd {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ip = new Uint8Array(0);
        message.port = 0;
        if (value !== undefined)
            reflectionMergePartial<Pd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Pd): Pd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes ip */ 1:
                    message.ip = reader.bytes();
                    break;
                case /* uint32 port */ 2:
                    message.port = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Pd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes ip = 1; */
        if (message.ip.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.ip);
        /* uint32 port = 2; */
        if (message.port !== 0)
            writer.tag(2, WireType.Varint).uint32(message.port);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Pd
 */
export const Pd = new Pd$Type();
